<style>
  * {
    box-sizing: border-box;
  }
  body {
      background-color:#f5F5F5;
      font-family: 'Inter';
      display:flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      margin:0;
  }

  #color {
    display: none;
  }

  #size {
    display: none;
  }

  #increase {
    display: none;
  }

  #decrease {
    display: none;
  }

  canvas{
    border:4px solid #FAF9F7;
    margin: auto;
  }

  #canvas2 {
    display: none;
  }

  .toolbox{
    display:flex;
    width:52.5vw;
    padding:1rem;
    margin: auto;
  }
  .toolbox > *{
      background-color:white;
      border:none;
      display:inline-flex;
      align-items:center;
      justify-content:center;
      font-size:2rem;
      height:50px;
      width:50px;
      margin:0.25rem;
      padding:0.25rem;
  }
  .toolbox > *:last-child{
      margin-left:auto;
  }

  @media (max-width: 440px) {
    canvas {
      display: none;
    }
    #canvas2 {
      display: block;
    }
    .toolbox {
      width:86.5vw;
    }
    .toolbox > * {
      height:30px;
      width:30px;
      margin:0.25rem;
      padding:0.25rem;
    }
  }
</style>

<canvas id="canvas" width="650" height="350" >
</canvas>
<canvas id="canvas2" width="300" height="200" >
</canvas>
<div>
  <div class="text-[18px] text-black absolute 4xsm:bottom-[300px] 4xsm:left-[55px] md:md:text-[36px] md:bottom-[490px] md:left-[340px] select-none">
    <span class="font-thin"><%= t('firstname') %></span>
    <span class="font-black"><%= t('lastname') %></span>
  </div>
  <div>
    <p class="text-black text-[14px] absolute 4xsm:bottom-[250px] 4xsm:max-w-[250px] 4xsm:left-[55px] md:max-w-[650px] md:bottom-[440px] md:text-[20px] md:left-[340px] select-none"><%= t('contact-me-title') %></p>
  </div>
</div>
<p class="text-black absolute 4xsm:bottom-[210px] 4xsm:left-[55px] md:bottom-[350px] md:left-[340px] select-none">Reach me at:</p>
<p class="text-black absolute 4xsm:bottom-[195px] 4xsm:left-[55px] md:bottom-[330px] md:left-[340px] select-none underline underline-offset-1"><a href="mailto:maxplasse.pro@gmail.com">maxplasse.pro@gmail.com</a></p>
<p class="text-black absolute 4xsm:bottom-[170px] 4xsm:left-[55px] md:bottom-[350px] md:left-[650px] select-none">Or call me at:</p>
<p class="text-black absolute 4xsm:bottom-[155px] 4xsm:left-[55px] md:bottom-[330px] md:left-[650px] select-none">+33 6 24 78 70 64</p>
<div class="toolbox">
    <button id="decrease">-</button>
    <span id="size">30</span>
    <button id="increase">+</button>
    <input type="color" id="color">
    <button id="clear">X</button>
</div>

<script>
 const desktopCanvas = document.getElementById("canvas");
  const mobileCanvas = document.getElementById("canvas2");

  // Use the appropriate canvas based on the screen size
  const canvas = window.innerWidth > 440 ? desktopCanvas : mobileCanvas;
  const ctx = canvas.getContext("2d");

  const clear = document.getElementById("clear");
  clear.addEventListener("click", function () {
    ctx.clearRect(0, 0, canvas.width, canvas.height);
  });

  let spanSize = document.getElementById("size");
  let color = "#FAF9F7";

  let colorX = document.getElementById("color");
  colorX.addEventListener("input", function () {
    color = colorX.value;
  });

  let increase = document.getElementById("increase");
  increase.addEventListener("click", function () {
    spanSize.textContent = ++size;
  });

  let decrease = document.getElementById("decrease");
  decrease.addEventListener("click", function () {
    spanSize.textContent = --size;
  });

  let size = 30;
  let isPressed = false;
  let x;
  let y;

  canvas.addEventListener("mousedown", (e) => {
    isPressed = true;
    x = e.offsetX;
    y = e.offsetY;
  });

  canvas.addEventListener("touchstart", (e) => {
    isPressed = true;
    const touch = e.touches[0];
    x = touch.clientX - canvas.getBoundingClientRect().left;
    y = touch.clientY - canvas.getBoundingClientRect().top;
  });

  canvas.addEventListener("mouseup", () => {
    isPressed = false;
    x = undefined;
    y = undefined;
  });

  canvas.addEventListener("touchend", () => {
    isPressed = false;
    x = undefined;
    y = undefined;
  });

  canvas.addEventListener("mousemove", (e) => {
    if (isPressed) {
      const x2 = e.offsetX;
      const y2 = e.offsetY;

      drawCircle(x2, y2);
      drawLine(x, y, x2, y2);
      x = x2;
      y = y2;
    }
  });

  canvas.addEventListener("touchmove", (e) => {
    if (isPressed) {
      const touch = e.touches[0];
      const x2 = touch.clientX - canvas.getBoundingClientRect().left;
      const y2 = touch.clientY - canvas.getBoundingClientRect().top;

      drawCircle(x2, y2);
      drawLine(x, y, x2, y2);
      x = x2;
      y = y2;
    }
  });

  // Disable both vertical and horizontal scrolling on the canvas element
  canvas.addEventListener("touchmove", (e) => {
    if (isPressed) {
      e.preventDefault(); // Prevent default touch event behavior while drawing
      const touch = e.touches[0];
      const x2 = touch.clientX - canvas.getBoundingClientRect().left;
      const y2 = touch.clientY - canvas.getBoundingClientRect().top;

      drawCircle(x2, y2);
      drawLine(x, y, x2, y2);
      x = x2;
      y = y2;
    }
  }, { passive: false });


  function drawCircle(x, y) {
    ctx.beginPath();
    ctx.arc(x, y, size, 0, Math.PI * 2);
    ctx.fillStyle = color;
    ctx.fill();
  }

  function drawLine(x1, y1, x2, y2) {
    ctx.beginPath();
    ctx.moveTo(x1, y1);
    ctx.lineTo(x2, y2);
    ctx.strokeStyle = color;
    ctx.lineWidth = size * 2;
    ctx.stroke();
  }

</script>
